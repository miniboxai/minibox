// Code generated by go-bindata.
// sources:
// assets/framework.defaults.yaml
// DO NOT EDIT!

package v1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFrameworkDefaultsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x8f\xda\x30\x10\xbd\xf3\x2b\xac\xdc\x63\x07\x2a\x54\x64\x15\xa4\xde\x38\x51\x0e\xb9\xf4\x54\x0d\x89\x31\x2e\x8e\x6d\xf9\x03\x1a\xa1\xfe\xf7\x95\x9d\x00\x01\xc1\xee\x6a\xc5\x29\xf6\x7b\xcf\x33\x2f\x6f\x26\xcf\xf3\x91\x04\xc5\x03\x70\xe6\xe8\x08\xa1\x92\x29\xa7\xed\x56\xea\x63\xbc\x21\x04\x52\x80\xeb\x8e\x08\xe5\x28\xf3\xdb\x2c\x5d\xe2\x23\x8a\x4c\xeb\x77\x5a\x25\x40\x34\xc0\x19\x45\xfe\xf2\x9e\x5c\x8f\x49\xe0\x81\x5f\x0a\xd5\x6c\x0b\x41\x7a\x8a\xc6\x78\x86\x8b\xdc\xb4\xdf\x12\x71\x60\xd6\x09\xad\x86\xfd\x7e\x8c\xf1\x04\x17\xf3\x45\x50\x70\x00\x21\x61\x23\x59\x76\xc3\xce\x22\x3b\xc6\xd3\xae\xcc\x80\x5b\xcc\x2f\xe4\x6c\x48\x9e\x9b\xfc\x31\xed\x84\x3e\x94\x77\xb5\x26\x77\x72\x6e\xc2\x17\x7d\x71\x13\x9e\xfb\x8a\x24\x42\x28\xf1\x4c\x1d\x06\x2d\xd6\xbf\xcb\xe5\xaf\xd5\xfa\x67\xb9\x9c\x9f\x8e\xda\xee\x6b\x61\xff\x77\x75\xaa\xa6\xbe\xea\x06\x33\x88\xd7\x46\xd7\x4c\x62\xd3\x26\xa0\x16\xf6\x9a\x39\x78\xa0\x08\x93\xf8\xed\x21\xa9\x79\x44\xa4\xe6\xb5\xb0\x3d\x96\xde\x47\x34\x1d\x5c\x42\xfb\xee\x14\x65\x24\x38\x4b\x9c\xad\xc8\xc9\x58\xfd\x97\x55\x7e\x05\x0d\x4b\xae\x4a\x6d\xab\x1d\x1d\xec\x86\x0c\x30\x5c\x8c\x3d\x88\x7f\x3b\xa1\x88\x8f\xba\xe7\x0b\x21\xc1\x33\xe7\x3f\xdd\xf5\xe1\xce\x2c\x0a\x5c\xc4\x80\xbb\x5a\xef\x8e\xf1\x2c\x3d\xbb\xab\x42\x0d\x79\xb2\x48\xbf\xe3\x69\xf6\xca\x10\x6f\x86\x96\xfe\x68\x23\x14\x91\x01\xac\xae\xf6\xee\x6e\x7e\x5d\x78\xeb\xf6\xa3\x54\x4d\x9b\xcc\x92\xfe\xfb\xc2\x5c\xdf\x02\x00\x00\xff\xff\xfa\x5a\x16\x61\x1a\x04\x00\x00")

func assetsFrameworkDefaultsYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsFrameworkDefaultsYaml,
		"assets/framework.defaults.yaml",
	)
}

func assetsFrameworkDefaultsYaml() (*asset, error) {
	bytes, err := assetsFrameworkDefaultsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/framework.defaults.yaml", size: 1050, mode: os.FileMode(420), modTime: time.Unix(1537090722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/framework.defaults.yaml": assetsFrameworkDefaultsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"framework.defaults.yaml": &bintree{assetsFrameworkDefaultsYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
