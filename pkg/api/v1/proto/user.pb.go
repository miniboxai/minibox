// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

package proto

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/gogoproto"
import types1 "github.com/gogo/protobuf/types"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/mwitkow/go-proto-validators"
import types "minibox.ai/minibox/pkg/api/v1/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	AddUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*types1.Empty, error)
	ListUsers(ctx context.Context, in *types.ListUsersRequest, opts ...grpc.CallOption) (*types.UsersReply, error)
	ListUsersByRole(ctx context.Context, in *types.UserRole, opts ...grpc.CallOption) (*types.UsersReply, error)
	UpdateUser(ctx context.Context, in *types.UpdateUserRequest, opts ...grpc.CallOption) (*types.User, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUser(ctx context.Context, in *types.User, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/proto.UserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *types.ListUsersRequest, opts ...grpc.CallOption) (*types.UsersReply, error) {
	out := new(types.UsersReply)
	err := c.cc.Invoke(ctx, "/proto.UserService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsersByRole(ctx context.Context, in *types.UserRole, opts ...grpc.CallOption) (*types.UsersReply, error) {
	out := new(types.UsersReply)
	err := c.cc.Invoke(ctx, "/proto.UserService/ListUsersByRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *types.UpdateUserRequest, opts ...grpc.CallOption) (*types.User, error) {
	out := new(types.User)
	err := c.cc.Invoke(ctx, "/proto.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	AddUser(context.Context, *types.User) (*types1.Empty, error)
	ListUsers(context.Context, *types.ListUsersRequest) (*types.UsersReply, error)
	ListUsersByRole(context.Context, *types.UserRole) (*types.UsersReply, error)
	UpdateUser(context.Context, *types.UpdateUserRequest) (*types.User, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*types.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*types.ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsersByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UserRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsersByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/ListUsersByRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsersByRole(ctx, req.(*types.UserRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*types.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
		{
			MethodName: "ListUsersByRole",
			Handler:    _UserService_ListUsersByRole_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_user_769377846bdfc1d3) }
func init() { golang_proto.RegisterFile("user.proto", fileDescriptor_user_769377846bdfc1d3) }

var fileDescriptor_user_769377846bdfc1d3 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4f, 0x8b, 0x13, 0x31,
	0x14, 0x67, 0xaa, 0xab, 0x98, 0x22, 0xc5, 0xa0, 0xbb, 0x4b, 0x95, 0xd9, 0x52, 0xf4, 0xb2, 0x38,
	0x13, 0xb7, 0x82, 0x87, 0x1e, 0x84, 0x2e, 0x08, 0x2a, 0x2a, 0x5a, 0xd9, 0x8b, 0x17, 0x49, 0x3b,
	0x6f, 0xb3, 0x61, 0x67, 0xe6, 0xc5, 0x24, 0xd3, 0xee, 0x20, 0x5e, 0xfc, 0x08, 0xfa, 0x85, 0x3c,
	0xee, 0x51, 0x10, 0x3c, 0x4b, 0xd7, 0x0f, 0x22, 0x49, 0xd3, 0xda, 0x96, 0x3d, 0xe5, 0xbd, 0xf7,
	0xfb, 0xf3, 0x92, 0xf7, 0x42, 0x48, 0x65, 0x40, 0xa7, 0x4a, 0xa3, 0x45, 0xba, 0xe5, 0x8f, 0xf6,
	0x5d, 0x81, 0x28, 0x72, 0x60, 0x3e, 0x1b, 0x55, 0xc7, 0x0c, 0x0a, 0x65, 0xeb, 0x39, 0xa7, 0xbd,
	0xb7, 0x09, 0x5a, 0x59, 0x80, 0xb1, 0xbc, 0x50, 0x81, 0x10, 0x6f, 0x12, 0xb2, 0x4a, 0x73, 0x2b,
	0xb1, 0x0c, 0x78, 0x67, 0x13, 0x3f, 0x96, 0x90, 0x67, 0x1f, 0x0b, 0x6e, 0x4e, 0x03, 0xe3, 0x5e,
	0x60, 0x70, 0x25, 0x19, 0x2f, 0x4b, 0xb4, 0x5e, 0x6e, 0x02, 0xfa, 0xd0, 0x1f, 0xe3, 0x44, 0x40,
	0x99, 0x98, 0x29, 0x17, 0x02, 0x34, 0x43, 0xe5, 0x19, 0x97, 0xb0, 0x13, 0x21, 0xed, 0x49, 0x35,
	0x4a, 0xc7, 0x58, 0x30, 0x81, 0x02, 0xff, 0xb7, 0x75, 0x99, 0x4f, 0x7c, 0x14, 0xe8, 0x4f, 0x56,
	0xe8, 0xc5, 0x54, 0xda, 0x53, 0x9c, 0x32, 0x81, 0x89, 0x07, 0x93, 0x09, 0xcf, 0x65, 0xc6, 0x2d,
	0x6a, 0xc3, 0x96, 0x61, 0xd0, 0x35, 0x6d, 0xad, 0x20, 0xf4, 0xec, 0xfd, 0x6e, 0x90, 0xe6, 0x91,
	0x01, 0xfd, 0x1e, 0xf4, 0x44, 0x8e, 0x81, 0x3e, 0x27, 0xd7, 0x07, 0x59, 0xe6, 0x2a, 0xb4, 0x99,
	0xce, 0x89, 0x2e, 0x69, 0x6f, 0xa7, 0xf3, 0x87, 0xa6, 0x8b, 0x3b, 0xa5, 0xcf, 0xdc, 0xa0, 0xbb,
	0xbb, 0x5f, 0x7f, 0xfd, 0xfd, 0xde, 0xa0, 0xdd, 0x9b, 0x7e, 0x02, 0x93, 0x03, 0xe6, 0x56, 0x64,
	0xfa, 0xd1, 0x3e, 0x7d, 0x43, 0x6e, 0xbc, 0x92, 0xc6, 0x3a, 0xb5, 0xa1, 0x3b, 0xc1, 0x6b, 0x59,
	0x19, 0xc2, 0xa7, 0x0a, 0x8c, 0x6d, 0xdf, 0x5a, 0x69, 0x62, 0x86, 0xa0, 0xf2, 0xba, 0x7b, 0xc7,
	0x5b, 0xb6, 0xe8, 0xba, 0x25, 0x7d, 0x47, 0x5a, 0x4b, 0xf5, 0x61, 0x3d, 0xc4, 0x1c, 0x68, 0x6b,
	0x45, 0xec, 0x0a, 0x97, 0xb9, 0xb5, 0xbd, 0xdb, 0x6d, 0x4a, 0xd7, 0xdc, 0x98, 0x76, 0xfa, 0x0f,
	0x84, 0x1c, 0xa9, 0x8c, 0x5b, 0xf0, 0xef, 0xdd, 0x5d, 0x88, 0x97, 0xa5, 0xc5, 0x25, 0x57, 0x27,
	0xd1, 0x7d, 0xe0, 0x0d, 0xf7, 0x7a, 0x3b, 0xeb, 0x86, 0x9f, 0xfd, 0xdf, 0x94, 0xd9, 0x97, 0xfe,
	0x55, 0x17, 0x1d, 0xf2, 0x6f, 0x83, 0x97, 0x74, 0xab, 0x77, 0xe5, 0x20, 0x7d, 0xb4, 0x1f, 0x35,
	0xf4, 0x53, 0xb2, 0xfd, 0x5a, 0x96, 0x72, 0x84, 0x67, 0x9d, 0xc1, 0xdb, 0x17, 0x1d, 0x0d, 0x0a,
	0x8d, 0xb4, 0xa8, 0x6b, 0x7a, 0xff, 0xc4, 0x5a, 0x65, 0xfa, 0x8c, 0x6d, 0x6e, 0x5f, 0x68, 0x35,
	0x4e, 0xe0, 0x8c, 0x17, 0x2a, 0x87, 0xf3, 0x59, 0x1c, 0xfd, 0x9c, 0xc5, 0xd1, 0x9f, 0x59, 0x1c,
	0xfd, 0xb8, 0x88, 0xa3, 0xf3, 0x8b, 0x38, 0x1a, 0x5d, 0xf3, 0xbb, 0x78, 0xfc, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0xbe, 0xea, 0x29, 0x72, 0x17, 0x03, 0x00, 0x00,
}
