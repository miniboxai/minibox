// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package types

import fmt "fmt"
import github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
import proto "github.com/gogo/protobuf/proto"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/mwitkow/go-proto-validators"

import time "time"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

func (this *User) Validate() error {
	if !(this.ID > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("ID", fmt.Errorf(`ID must a positive integer`))
	}
	if this.CreatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreatedAt", err)
		}
	}
	if this.UpdatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdatedAt", err)
		}
	}
	for _, item := range this.Projects {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Projects", err)
			}
		}
	}
	for _, item := range this.Organizations {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Organizations", err)
			}
		}
	}
	return nil
}
func (this *Object) Validate() error {
	if this.CreatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreatedAt", err)
		}
	}
	if this.UpdatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdatedAt", err)
		}
	}
	return nil
}
func (this *Project) Validate() error {
	if this.ID == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ID", fmt.Errorf(`ID cant be empty`))
	}
	if this.CreatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreatedAt", err)
		}
	}
	if this.Author != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Author); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Author", err)
		}
	}
	return nil
}
func (this *Dataset) Validate() error {
	if this.PublishAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.PublishAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("PublishAt", err)
		}
	}
	if this.ModifyAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ModifyAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ModifyAt", err)
		}
	}
	if this.CreatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreatedAt", err)
		}
	}
	if this.Author != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Author); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Author", err)
		}
	}
	return nil
}
func (this *Organization) Validate() error {
	if this.Owner != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Owner); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Owner", err)
		}
	}
	if this.CreatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreatedAt", err)
		}
	}
	if this.UpdatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdatedAt", err)
		}
	}
	return nil
}
func (this *UsersReply) Validate() error {
	for _, item := range this.Users {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Users", err)
			}
		}
	}
	return nil
}
func (this *ProjectsReply) Validate() error {
	for _, item := range this.Projects {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Projects", err)
			}
		}
	}
	return nil
}
func (this *UserRole) Validate() error {
	return nil
}
func (this *UpdateUserRequest) Validate() error {
	if this.User != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.User); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("User", err)
		}
	}
	if this.UpdateMask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdateMask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdateMask", err)
		}
	}
	return nil
}
func (this *ListProjectsRequest) Validate() error {
	return nil
}
func (this *ListUsersRequest) Validate() error {
	if this.CreatedSince != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreatedSince); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreatedSince", err)
		}
	}
	if this.OlderThan != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.OlderThan); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("OlderThan", err)
		}
	}
	return nil
}
func (this *CreateDatasetRequest) Validate() error {
	return nil
}
func (this *ListDatasetsRequest) Validate() error {
	return nil
}
func (this *CreateProjectRequest) Validate() error {
	return nil
}
func (this *GetProjectRequest) Validate() error {
	return nil
}
func (this *DeleteProjectRequest) Validate() error {
	return nil
}
func (this *UpdateProjectRequest) Validate() error {
	return nil
}
func (this *DatasetsReply) Validate() error {
	for _, item := range this.Datasets {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Datasets", err)
			}
		}
	}
	return nil
}
func (this *DeleteDatasetRequest) Validate() error {
	return nil
}
func (this *RestoreDatasetRequest) Validate() error {
	return nil
}
func (this *ListObjectsRequest) Validate() error {
	if this.Id != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Id); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Id", err)
		}
	}
	return nil
}
func (this *GetObjectRequest) Validate() error {
	if this.DatasetId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DatasetId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DatasetId", err)
		}
	}
	return nil
}
func (this *ObjectID) Validate() error {
	return nil
}
func (this *PutObjectRequest) Validate() error {
	if oneOfNester, ok := this.GetValue().(*PutObjectRequest_Key_); ok {
		if oneOfNester.Key != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Key); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Key", err)
			}
		}
	}
	if oneOfNester, ok := this.GetValue().(*PutObjectRequest_Chunk_); ok {
		if oneOfNester.Chunk != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Chunk); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Chunk", err)
			}
		}
	}
	return nil
}
func (this *PutObjectRequest_Key) Validate() error {
	if this.Id != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Id); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Id", err)
		}
	}
	return nil
}
func (this *PutObjectRequest_Chunk) Validate() error {
	return nil
}
func (this *DeleteObjectRequest) Validate() error {
	return nil
}
func (this *ObjectReply) Validate() error {
	if this.Object != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Object); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Object", err)
		}
	}
	return nil
}
func (this *PutObjectReply) Validate() error {
	return nil
}
func (this *GetObjectReply) Validate() error {
	return nil
}
func (this *ObjectsReply) Validate() error {
	for _, item := range this.Objects {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Objects", err)
			}
		}
	}
	return nil
}
